#!/bin/sh
#
# Usage: ./build-zsh-5.8-static
#
# Creates an archive containing statically-linked, hermetic,
# relocatable zsh 5.8. Installation of zsh from the archive
# doesn't require libc, terminfo, ncurses or root access.
# As long as the target machine has a compatible CPU and
# Linux kernel, it'll work.
#
# Running ./build-zsh-5.8-static on x86_64 Linux will create
# zsh-5.8-linux-x86_64-static.tar.gz in the current directory.
#
# To install zsh from the archive, copy it to the target
# machine's home directory and run:
#
#   mkdir -p ~/apps
#   cd ~/apps
#   tar -xzf ~/zsh-5.8-linux-x86_64-static.tar.gz
#   zsh-5.8-linux-x86_64-static/share/zsh/5.8/scripts/relocate
#   rm ~/zsh-5.8-linux-x86_64-static.tar.gz
#
# After that you can invoke ~/apps/zsh-5.8-linux-x86_64-static/bin/zsh
# and it'll just work, although you'll probably want to add
# ~/apps/zsh-5.8-linux-x86_64-static/bin to PATH for convenience.
#
# If you move or rename ~/apps/zsh-5.8-linux-x86_64-static,
# remember to call `.../relocate` afterwards. This script
# configures zsh so that it loads builtin functions from the
# new location.

set -ue

if [ "$(uname -s)" != Linux ]; then
  echo '[error] unsupported kernel, sorry!' >&2
  exit 1
fi

if ! command -v docker >/dev/null 2>&1; then
  echo '[error] docker not found; please install and retry' >&2
  exit 1
fi

docker run -v "$PWD":/out -it --rm alpine:3.9.5 /bin/sh -uexc "$(cat <<\END
apk update
apk add          \
  autoconf       \
  bash           \
  binutils       \
  g++            \
  gcc            \
  gdbm-dev       \
  groff          \
  make           \
  man            \
  musl-dev       \
  ncurses        \
  ncurses-dev    \
  ncurses-static \
  pcre-dev       \
  util-linux

cd
wget https://gitlab.com/fbb-git/icmake/-/archive/9.03.01/icmake-9.03.01.tar.gz
tar -xzf icmake-9.03.01.tar.gz
cd icmake-9.03.01/icmake
./icm_prepare /
./icm_bootstrap x
./icm_install all

cd
wget https://gitlab.com/fbb-git/yodl/-/archive/4.02.01/yodl-4.02.01.tar.gz
tar -xzf yodl-4.02.01.tar.gz
cd yodl-4.02.01/yodl
./build programs
./build macros
./build install programs /
./build install macros /

cd
wget https://github.com/zsh-users/zsh/archive/zsh-5.8.tar.gz
tar -xzf zsh-5.8.tar.gz
cd zsh-zsh-5.8

kernel=$(uname -s | tr '[A-Z]' '[a-z]')
arch=$(uname -m | tr '[A-Z]' '[a-z]')
name=zsh-5.8-"$kernel"-"$arch"-static

./Util/preconfig
./configure                 \
  --prefix=/"$name"         \
  --disable-etcdir          \
  --disable-site-fndir      \
  --disable-site-scriptdir  \
  --enable-zsh-secure-free  \
  --disable-dynamic         \
  --enable-ldflags=-static  \
  --enable-libc-musl        \
  --enable-custom-patchlevel="$name"

sed 's/link=no/link=static/' -i config.modules
sed $'113i\\\t    cp -f ../zshpaths.h zshpaths.h.tmp; \\\\' -i Src/zsh.mdd

cat >zshpaths.h <<-\END
	#define MODULE_DIR "/dev/null"

	#define SCRIPT_DIR_TAG ":iLWDLaG9dUlsxzEQp10k:script:"
	#define FPATH_DIR_TAG ":iLWDLaG9dUlsxzEQp10k:fpath:"
	#define TERMINFO_DIR_TAG ":iLWDLaG9dUlsxzEQp10k:terminfo:"

	extern volatile char tagged_script_dir[sizeof(SCRIPT_DIR_TAG) + 4096];
	extern volatile char tagged_fpath_dir[sizeof(FPATH_DIR_TAG) + 4096];
	extern volatile char tagged_terminfo_dir[sizeof(TERMINFO_DIR_TAG) + 4096];

	#define SCRIPT_DIR ((const char *)(tagged_script_dir + sizeof(SCRIPT_DIR_TAG) - 1))
	#define FPATH_DIR ((const char *)(tagged_fpath_dir + sizeof(FPATH_DIR_TAG) - 1))
	#define TERMINFO_DIR ((const char *)(tagged_terminfo_dir + sizeof(TERMINFO_DIR_TAG) - 1))

	extern int tgetent_with_env(char *, const char *);
	END

sed 's/tgetent/tgetent_with_env/g' -i Src/init.c

cat >>Src/init.c <<-\END
	volatile char tagged_script_dir[sizeof(SCRIPT_DIR_TAG) + 4096] = {
	  SCRIPT_DIR_TAG "/usr/share/zsh/5.8/scripts"
	};
	volatile char tagged_fpath_dir[sizeof(FPATH_DIR_TAG) + 4096] = {
	  FPATH_DIR_TAG "/usr/share/zsh/5.8/functions"
	};
	volatile char tagged_terminfo_dir[sizeof(TERMINFO_DIR_TAG) + 4096] = {
	  TERMINFO_DIR_TAG "/usr/share/terminfo"
	};

	extern int tgetent_with_env(char *termbuf, const char *term) {
	  const char *orig;
	  char *patched;
	  int res;
	  orig = getenv("TERMINFO_DIRS");
	  patched = orig ? tricat(orig, ":", TERMINFO_DIR) : TERMINFO_DIR;
	  setenv("TERMINFO_DIRS", patched, 1);  /* ignore ENOMEM */
	  res = tgetent(termbuf, term);
	  if (orig) {
	    zsfree(patched);
	    setenv("TERMINFO_DIRS", orig, 1);  /* ignore ENOMEM */
	  } else {
	    unsetenv("TERMINFO_DIRS");
	  }
	  return res;
	}
	END

make -j 20 install
strip -s /"$name"/bin/zsh
rm /"$name"/bin/zsh-5.8
cp -r /usr/share/terminfo /"$name"/share/

cat >/"$name"/share/zsh/5.8/scripts/relocate <<-\END
	#!/bin/sh

	set -ue

	if [ $# -gt 2 ]; then
	  echo 'usage: relocate [/path/to/zsh] [/path/to/root-dir]' >&2
	  exit 1
	fi

	if [ $# -ge 1 ]; then
	  zsh=$1
	else
	  self_dir=$(dirname -- "$0")
	  zsh="$self_dir"/../../../../bin/zsh
	fi

	if [ $# -ge 2 ]; then
	  root_dir=$(readlink -f -- "$2")
	else
	  root_dir="$(dirname -- "$zsh")"/..
	  root_dir=$(readlink -f -- "$root_dir")
	fi

	if [ ! -x "$zsh" ]; then
	  echo "not an executable file: $zsh" >&2
	  exit 1
	fi

	if [ ! -d "$root_dir" ]; then
	  echo "not a directory: $root_dir" >&2
	  exit 1
	fi

	root_dir="${root_dir%/}/"

	# 4096 minus 23 for "share/zsh/5.8/functions"
	if [ ${#root_dir} -gt 4073 ]; then
	  echo "directory name too long: $root_dir" >&2
	  exit 1
	fi

	echo "Setting root directory for $(readlink -f "$zsh") => $root_dir" >&2

	magic=iLWDLaG9dUlsxzEQp10k
	bin=$(LC_ALL=C tr -c '[:alnum:]:' ' ' <"$zsh")
	cp -pf -- "$zsh" "$zsh".tmp

	patch() {
	  local prefix="${bin%:$magic:$1:*}"
	  if [ "$prefix" = "$bin" ]; then
	    echo "not a relocatable zsh binary: $zsh" >&2
      exit 1
	  fi
	  prefix="$prefix:$magic:$1:"
	  local dir="${root_dir}$2"
	  dd if=/dev/zero of="$zsh".tmp bs=1 seek=${#prefix} count=4096 conv=notrunc
	  echo "$dir" | dd of="$zsh".tmp bs=1 seek=${#prefix} count=${#dir} conv=notrunc
	}

	patch script   share/zsh/5.8/scripts
	patch fpath    share/zsh/5.8/functions
	patch terminfo share/terminfo

	if ! fpath=$("$zsh".tmp -c 'print -r -- $fpath[1]') ||
    [ "${fpath#$root_dir}" = "$fpath" ]; then
	  echo "failed to relocate zsh" >&2
	  exit 1
	fi

	mv -f -- "$zsh".tmp "$zsh"
	END

chmod +x /"$name"/share/zsh/5.8/scripts/relocate

/"$name"/share/zsh/5.8/scripts/relocate
/"$name"/bin/zsh -ec 'zmodload zsh/zselect; autoload -Uz add-zsh-hook; add-zsh-hook precmd x'
/"$name"/share/zsh/5.8/scripts/relocate /"$name"/bin/zsh /usr

tar -C / -pczf /out/tmp."$name".tar.gz "$name"
mv -f -- /out/tmp."$name".tar.gz /out/"$name".tar.gz

cat >&2 <<-END
	-------------------------------------------------
	SUCCESS: created ./$name.tar.gz.

	This archive contains statically-linked, hermetic,
	relocatable zsh 5.8. Installation of zsh from the archive
	doesn't require libc, terminfo, ncurses or root access.
	As long as the target machine has a compatible CPU and
	Linux kernel, it'll work.

	To install zsh from the archive, copy it to the target
	machine's home directory and run:

	  mkdir -p ~/apps
	  cd ~/apps
	  tar -xzf ~/$name.tar.gz
	  $name/share/zsh/5.8/scripts/relocate
	  rm ~/$name.tar.gz

	After that you can invoke ~/apps/$name/bin/zsh
	and it'll just work, although you'll probably want to add
	~/apps/$name/bin to PATH for convenience.

	If you move or rename ~/apps/$name,
	remember to call \`.../relocate\` afterwards. This script
	configures zsh so that it loads builtin functions from the
	new location.
	END
END
)"
