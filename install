#!/bin/sh
#
# Type `install -h` for usage and see https://github.com/romkatv/zsh-bin
# for documentation.

{

set -ue

if [ -n "${ZSH_VERSION:-}" ]; then
  emulate sh -o err_exit -o no_unset
fi

readonly url_base=https://github.com/romkatv/zsh-bin/releases/download/v4.1.0

readonly archives='
file:zsh-5.8-cygwin_nt-10.0-i686.tar.gz;   md5:802419655aebe17d5318748ef589d483; sha256:71d7b27a273723efa89b465dbbde17deb66416db35d57c7b48caf4daa762070f;
file:zsh-5.8-cygwin_nt-10.0-x86_64.tar.gz; md5:4c7760b792758f11d8c65a54a9229222; sha256:ea897ebe26dd004f1169692f94800d521f063f413d274b6dfec396219a1db195;
file:zsh-5.8-darwin-x86_64.tar.gz;         md5:fad69954ea1c26d198e266ed148db187; sha256:84adec97934a5ce2ee3ca26c3f7ec4e70f46e8b97980ea2e264984ba3e6ed8de;
file:zsh-5.8-freebsd-amd64.tar.gz;         md5:76d8e38162111aee77d49ea9c457708b; sha256:1c9dcc398f594b29aa7791a8cbf8adc87aaa6af25d75b8f1063d0c80452bf3de;
file:zsh-5.8-linux-aarch64.tar.gz;         md5:a225fd8ba7bfbf9be2afa4b982b67104; sha256:5e2e66a2eb4c3c69c0a803ed531ad92fb79fab0d9c5c5f138686af54d40754ec;
file:zsh-5.8-linux-armv6l.tar.gz;          md5:bf7350d19d9f06da7bed87acc7c9b95f; sha256:6484ef460d2aa043f312b85b3f0bf349b4ff0bd14f4e0cefde78652e8ecdc041;
file:zsh-5.8-linux-armv7l.tar.gz;          md5:613c4ef093533b1a7c083cf14130f748; sha256:f343355d3be2247a40d412a0d7883d1b216132dad4fe740ba85c60ca208af4fa;
file:zsh-5.8-linux-i386.tar.gz;            md5:d65f0fffd9e229ecc7d27466be8d6136; sha256:6b2ad9fe9040a70a815f54b8ed0ccf68bf3fc0bd17491958703a8c871cacb9ae;
file:zsh-5.8-linux-i586.tar.gz;            md5:ab7f7d0577c83203548bf79e785738e2; sha256:4c65ed88db6896b55c5e1531bdab171f02aafc389fa970b62ed2221722d9a5d7;
file:zsh-5.8-linux-i686.tar.gz;            md5:7765093fbc8d1ac4d88197d7826be4b9; sha256:67eed1e1766a58b4a64ef8ccfcf04302a5b5b0f19e6d646b94fd836f2a488587;
file:zsh-5.8-linux-x86_64.tar.gz;          md5:2237cf51416f10f1af0942da5e470556; sha256:3169f5f0a8851ae58b1f1294a996cbb7a4f61c1c7a0b3175913bfa91d732a67e;
file:zsh-5.8-msys_nt-10.0-i686.tar.gz;     md5:0da7acfac0a9b36202e8581b4ba3c799; sha256:4a6f9db513e803fb56437a4933d64ce0d92c95c3f9a5d9a387437e854130309c;
file:zsh-5.8-msys_nt-10.0-x86_64.tar.gz;   md5:8badc6b7b818d226729f67b91e873d9d; sha256:61f3cdf73a7df40a0916919ce0704dffb3538d8317a1cf6eefd6726fbb1569ea;'

readonly lf="
"

if [ -t 1 ]; then
  readonly _0="$(printf '\033[0m')"
  readonly _B="$(printf '\033[1m')"
  readonly _U="$(printf '\033[4m')"
  readonly _R="$(printf '\033[31m')"
  readonly _G="$(printf '\033[32m')"
  readonly _Y="$(printf '\033[33m')"
else
  readonly _0=
  readonly _B=
  readonly _U=
  readonly _R=
  readonly _G=
  readonly _Y=
fi

usage="$(cat <<END
Usage: install [OPTIONS] [-t FILE] [-a <sha256|md5>]...
               [OPTIONS] -f FILE
               [OPTIONS] -u URL

If '-f FILE' is specified, install Zsh from the specified *.tar.gz
file produced by the build script.

If '-u URL' is specified, download the file and install as if with
'-f FILE'.

If neither '-f' nor '-u' is specified, download the appopriate file
from https://github.com/romkatv/zsh-bin/releases and install as if
with '-t FILE'. If '-a <sha256|md5>' is specified at least once,
abort installation if integrity of the downloaded package cannot
be verified with at least one of the listed hashing algorithms.

Options:

  -q

    Produce no output on success.

  -d DIR

    Install to this directory. If specified more than once, present
    an interactive dialog to choose the directory. Empty argument
    means a custom directory (requires manual user input). If '-d'
    is not specified, the effect is idential to this:

      -d /usr/local -d ~/.local -d ""

  -s FD

    On success, write the path to the installation directory to this
    file descriptor.
END
)"

absfile() {
  if [ ! -e "$1" ]; then
    >&2 echo "${_R}error${_0}: file not found: ${_U}$1${_0}"
    return 1
  fi
  local dir base
  dir="$(dirname -- "$1")"
  base="$(basename -- "$1")"
  ( cd -- "$dir" && dir="$(pwd)" && printf '%s/%s\n' "${dir%/}" "${base}" )
}

check_dir() {
  if [ -z "$1" ]; then
    >&2 echo "${_R}error${_0}: directory cannot be empty string"
    exit 1
  fi
  if [ -z "${1##~*}" ]; then
    >&2 echo "${_R}error${_0}: please expand ${_U}~${_0} in directory name: ${_U}$1${_0}"
    exit 1
  fi
  if [ -z "${1##//*}" ]; then
    >&2 echo "${_R}error${_0}: directory cannot start with ${_U}//${_0}: ${_U}$1${_0}"
    exit 1
  fi
}

add_dir() {
  num_dirs=$((num_dirs + 1))
  dirs="$dirs${num_dirs}${1}${lf}"
  if [ -n "$1" ]; then
    dirs_c="$dirs_c  ${_B}($num_dirs)${_0} ${_U}${1}${_0}${lf}"
  else
    dirs_c="$dirs_c  ${_B}($num_dirs)${_0} custom directory (input required)${lf}"
  fi
}

check_sudo() {
  local dir="$1"
  sudo=
  while true; do
    if [ -e "$dir" ]; then
      if [ ! -d "$dir" ]; then
        >&2 echo "${_R}error${_0}: not a directory: ${_U}$dir${_0}"
        return 1
      fi
      if [ ! -w "$dir" ]; then
        if [ "$euid" = 0 ]; then
          >&2 echo "${_R}error${_0}: directory not writable: ${_U}$dir${_0}"
          return 1
        else
          if [ -z "$quiet" ]; then
            echo "${_Y}===>${_0} using ${_U}${_G}sudo${_0} for installation"
          fi
          sudo=sudo
        fi
      fi
      break
    fi
    if [ "$dir" = / -o "$dir" = . ]; then
      break
    fi
    dir="$(dirname -- "$dir")"
  done
}

dirs=
dirs_c=
num_dirs=0
quiet=
algos=
url=
file=
sudo=
fd=

command -v sudo >/dev/null 2>&1 && euid="$(id -u 2>/dev/null)" || euid=0

while getopts ':hqd:s:a:f:u:' opt "$@"; do
  case "$opt" in
    h)
      printf '%s\n' "$usage"
      exit
    ;;
    q)
      if [ -n "$quiet" ]; then
        >&2 echo "${_R}error${_0} duplicate option: ${_B}-${opt}${_0}"
        exit 1
      fi
      quiet=1
    ;;
    d)
      if printf "%s" "$dirs" | cut -b 2- | grep -qxF -- "$OPTARG"; then
        >&2 echo "${_R}error${_0}: duplicate option: ${_B}-${opt} ${OPTARG}${_0}"
        exit 1
      fi
      if [ "$(printf "%s" "$OPTARG" | wc -l)" != 0 ]; then
        >&2 echo "${_R}error${_0}: incorrect value of ${_B}-${opt}${_0}: ${_B}${OPTARG}${_0}"
        exit 1
      fi
      if [ "$num_dirs" = 9 ]; then
        >&2 echo "${_R}error${_0}: too many options: ${_B}-${opt}${_0}"
        exit 1
      fi
      if [ -n "$OPTARG" ]; then
        check_dir "$OPTARG"
      fi
      add_dir "$OPTARG"
    ;;
    s)
      if [ -n "$fd" ]; then
        >&2 echo "${_R}error${_0} duplicate option: ${_B}-${opt}${_0}"
        exit 1
      fi
      if ! printf '%s' "$OPTARG" | tr '\n' x | grep -qxE '[1-9][0-9]*'; then
        >&2 echo "${_R}error${_0}: incorrect value of ${_B}-${opt}${_0}: ${_B}${OPTARG}${_0}"
        exit 1
      fi
      fd="$OPTARG"
    ;;
    a)
      case "$OPTARG" in
        sha256|md5)
          if [ -n "$algos" -a -z "${algos##*<$OPTARG>*}" ]; then
            >&2 echo "${_R}error${_0}: duplicate option: ${_B}-${opt} ${OPTARG}${_0}"
            exit 1
          fi
          algos="$algos<$OPTARG>"
        ;;
        *)
          >&2 echo "${_R}error${_0}: incorrect value of ${_B}-${opt}${_0}: ${_B}${OPTARG}${_0}"
          exit 1
        ;;
      esac
    ;;
    f)
      if [ -n "$file" ]; then
        >&2 echo "${_R}error${_0}: duplicate option: ${_B}-${opt}${_0}"
        exit 1
      fi
      if [ -z "$OPTARG" ]; then
        >&2 echo "${_R}error${_0}: incorrect value of ${_B}-${opt}${_0}: ${_B}${OPTARG}${_0}"
        exit 1
      fi
      file="$(absfile "$OPTARG")"
    ;;
    u)
      if [ -n "$url" ]; then
        >&2 echo "${_R}error${_0}: duplicate option: ${_B}-${opt}${_0}"
        exit 1
      fi
      if [ -z "$OPTARG" ]; then
        >&2 echo "${_R}error${_0}: incorrect value of ${_B}-${opt}${_0}: ${_B}${OPTARG}${_0}"
        exit 1
      fi
      url="$OPTARG"
    ;;
    \?) >&2 echo "${_R}error${_0}: invalid option: ${_B}-${OPTARG}${_0}"           ; exit 1;;
    :)  >&2 echo "${_R}error${_0}: missing required argument: ${_B}-${OPTARG}${_0}"; exit 1;;
    *)  >&2 echo "${_R}internal error${_0}: unhandled option: ${_B}-${opt}${_0}"   ; exit 1;;
  esac
done

if [ "$OPTIND" -le $# ]; then
  >&2 echo "${_R}error${_0}: unexpected positional argument"
  return 1
fi

if [ -n "$algos" ]; then
  if [ -n "$file" ]; then
    >&2 echo "${_R}error${_0}: incompatible options: ${_B}-f${_0} and ${_B}-a${_0}"
    exit 1
  fi
  if [ -n "$url" ]; then
    >&2 echo "${_R}error${_0}: incompatible options: ${_B}-u${_0} and ${_B}-a${_0}"
    exit 1
  fi
fi

if [ "$num_dirs" = 0 ]; then
  add_dir /usr/local
  add_dir ~/.local
  add_dir ""

  dirs_c="  ${_B}(1)${_0} ${_U}/usr/local${_0}        ${_Y}<=${_0}"
  if check_sudo /usr/local >/dev/null 2>/dev/null; then
    if [ -n "$sudo" ]; then
      dirs_c="${dirs_c} uses ${_U}${_G}sudo${_0}"
    else
      dirs_c="${dirs_c} does not need ${_U}${_G}sudo${_0}"
    fi
    if [ -d /usr/local ]; then
      dirs_c="${dirs_c} (${_B}recommended${_0})"
    fi
  else
    dirs_c="${dirs_c} ${_R}not writable${_0}"
  fi

  dirs_c="${dirs_c}${lf}  ${_B}(2)${_0} ${_U}~/.local${_0}          ${_Y}<=${_0}"
  if check_sudo ~/.local >/dev/null 2>/dev/null; then
    if [ -n "$sudo" ]; then
      dirs_c="${dirs_c} uses ${_U}${_G}sudo${_0}"
    else
      dirs_c="${dirs_c} does not need ${_U}${_G}sudo${_0}"
    fi
  else
    dirs_c="${dirs_c} ${_R}not writable${_0}"
  fi

  dirs_c="${dirs_c}${lf}  ${_B}(3)${_0} custom directory  ${_Y}<=${_0} manual input required${lf}"
fi

if [ "$num_dirs" = 1 ]; then
  choice=1
else
  while true; do
    echo "Choose installation directory for ${_G}Zsh 5.8${_0}:"
    echo ""
    printf "%s" "$dirs_c"
    echo ""
    printf "Choice: "
    read -r choice
    if printf "%s" "$dirs" | cut -b 1 | grep -qxF -- "$choice"; then
      break
    fi
    >&2 echo "Invalid choice: ${_R}$choice${_0}. Try again."
    echo
  done
fi

dir="$(printf "%s" "$dirs" | sed "${choice}!d" | cut -b 2-)"
if [ -z "$dir" ]; then
  printf "Custom directory: "
  read -r dir
  check_dir "$dir"
  if [ -z "$quiet" ]; then
    echo
  fi
elif [ -z "$quiet" -a "$num_dirs" != 1 ]; then
  echo
fi

if [ -z "$quiet" ]; then
  printf "%s\n" "${_Y}===>${_0} installing ${_G}Zsh 5.8${_0} to ${_U}$dir${_0}"
fi

check_sudo "$dir"

$sudo mkdir -p -- "$dir"
cd -- "$dir"
dir="$(pwd)"

if [ -z "$file" -a -z "$url" ]; then
  kernel="$(uname -s | tr '[A-Z]' '[a-z]')"
  arch="$(uname -m | tr '[A-Z]' '[a-z]')"

  case "$kernel" in
    linux-armv8l)    kernel=linux-aarch64;;
    msys_nt-6.*)     kernel=msys_nt-10.0;;
    msys_nt-10.*)    kernel=msys_nt-10.0;;
    mingw32_nt-6.*)  kernel=msys_nt-10.0;;
    mingw32_nt-10.*) kernel=msys_nt-10.0;;
    mingw64_nt-6.*)  kernel=msys_nt-10.0;;
    mingw64_nt-10.*) kernel=msys_nt-10.0;;
    cygwin_nt-6.*)   kernel=cygwin_nt-10.0;;
    cygwin_nt-10.*)  kernel=cygwin_nt-10.0;;
  esac

  filename="zsh-5.8-${kernel}-${arch}.tar.gz"
  url="$url_base/$filename"

  if [ -n "${archives##*file:$filename;*}" ]; then
    >&2 echo "${_R}error${_0}: there is no prebuilt binary for your architecture"
    >&2 echo
    >&2 echo "See ${_U}https://github.com/romkatv/zsh-bin#compiling${_0} for building one."
    exit 1
  fi

  check_sig=1
else
  check_sig=0
fi

if [ -n "$url" ]; then
  file="${TMPDIR:-/tmp}"/zsh-bin.tmp.$$.tar.gz
  cleanup() { rm -f -- "$file"; }
  trap cleanup INT QUIT TERM EXIT ILL PIPE

  if [ -z "$quiet" ]; then
    echo "${_Y}===>${_0} fetching ${_U}${url##*/}${_0}"
  fi

  (
    cd -- "${file%/*}"
    file="${file##*/}"

    set +e

    if command -v curl >/dev/null 2>&1; then
      err="$(command curl -fsSLo "$file" -- "$url" 2>&1)"
    elif command -v wget >/dev/null 2>&1; then
      err="$(command wget -O "$file" -- "$url" 2>&1)"
    else
      >&2 echo "${_R}error${_0}: please install ${_G}curl${_0} or ${_G}wget${_0} and retry"
      exit 1
    fi

    if [ $? != 0 ]; then
      >&2 printf "%s\n" "$err"
      >&2 echo "${_R}error${_0}: failed to download ${_U}$url${_0}"
      exit 1
    fi
  )
else
  cleanup() { true; }
fi

if [ "$check_sig" = 1 ]; then
  if [ -z "$quiet" ]; then
    echo "${_Y}===>${_0} verifying archive integrity"
  fi

  for algo in sha256 md5; do
    hash=none
    case "$algo" in
      sha256)
        if command -v shasum >/dev/null 2>/dev/null; then
          hash="$(shasum -b -a 256 -- "$file")"
          hash="${hash%% *}"
        elif command -v sha256sum >/dev/null 2>/dev/null; then
          hash="$(sha256sum -b -- "$file")"
          hash="${hash%% *}"
        elif command -v sha256 >/dev/null 2>/dev/null; then
          # Ignore sha256 output if it's from hashalot. It's incompatible.
          hash="$(sha256 -- "$file" </dev/null)"
          if [ ${#hash} -lt 64 ]; then
            hash=none
          else
            hash="${hash##* }"
          fi
        fi
      ;;
      md5)
        if command -v md5sum >/dev/null 2>/dev/null; then
          hash="$(md5sum -b -- "$file")"
          hash="${hash%% *}"
        elif command -v md5 >/dev/null 2>/dev/null; then
          hash="$(md5 -- "$file")"
          hash="${hash##* }"
        fi
      ;;
      *)
        >&2 echo "${_R}internal error${_0}: unhandled algorithm: ${_B}$algo${_0}"
        exit 1
      ;;
    esac
    if [ "$hash" != none ]; then
      if [ -n "${archives##* $algo:$hash;*}" ]; then
        >&2 echo "${_R}error${_0}: ${_B}$algo${_0} signature mismatch"
        >&2 echo ""
        >&2 echo "Expected:"
        >&2 echo ""
        >&2 echo "  ${_G}$(printf "%s" "$archives" | grep -F -- "${url##*/}" | sed 's/  */ /g')${_0}"
        >&2 echo ""
        >&2 echo "Found:"
        >&2 echo ""
        >&2 echo "  ${_R}$algo:$hash${_0}"
        exit 1
      fi
      if [ -z "$quiet" ]; then
        echo "${_Y}===>${_0} ${_B}$algo${_0} signature matches"
      fi
      algos="${algos##*<$algo>*}"
    else
      if [ -z "$quiet" ]; then
        echo "${_Y}===>${_0} no tools to verify ${_B}$algo${_0} signature"
      fi
    fi
  done
fi

if [ -n "$algos" ]; then
  >&2 echo "${_R}error${_0}: no tools available to verify archive integrity"
  exit 1
fi

if [ -z "$quiet" ]; then
  echo "${_Y}===>${_0} extracting files"
fi

$sudo tar -xzf "$file"
$sudo ./share/zsh/5.8/scripts/relocate

$sudo ./bin/zsh -fc '
  setopt extended_glob                        || exit
  zmodload -F zsh/files b:{zf_mv,zf_rm,zf_ln} || exit

  for pat in "[[:lower:]]" "[^[:lower:]]"; do
    for hex in ./share/terminfo/[[:xdigit:]][[:xdigit:]](:t); do
      printf -v char "\\x$hex"
      [[ $char == $~pat ]]          || continue
      [ -e ./share/terminfo/$char ] && continue
      zf_ln -s -- "$hex" ./share/terminfo/$char 2>/dev/null   ||
        cp -r -- ./share/terminfo/$hex ./share/terminfo/$char || exit
    done
  done

  for file in ./share/zsh/5.8/functions/*~*.[^/]#(.); do
    tmp=$file.tmp.$$.zwc
    zf_rm -f -- $tmp $file.zwc || exit
    zcompile -R -- $tmp $file  || exit
    zf_mv -f -- $tmp $file.zwc || exit
  done'

cleanup

if [ -z "$quiet" ]; then
  echo ""
  echo "Installed ${_G}Zsh 5.8${_0} to ${_U}$dir${_0}"
  echo ""
  echo "To start Zsh, type:"
  echo ""
  if ! zsh="$(command -v zsh 2>/dev/null)" || [ "$zsh" != "$dir/bin/zsh" ]; then
    echo "  ${_Y}export${_0} PATH=${_Y}\"$dir/bin:\$PATH\"${_0}"
  fi
  echo "  ${_G}zsh${_0}"
  echo
fi

if [ -n "$fd" ]; then
  printf "%s\n" "$dir" >&"$fd"
fi

}
