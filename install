#!/bin/sh
#
# Type `install -h` for usage and see https://github.com/romkatv/zsh-bin
# for documentation.

{

set -ue

if [ -n "${ZSH_VERSION:-}" ]; then
  emulate sh -o err_exit -o no_unset
fi

readonly url_base=https://github.com/romkatv/zsh-bin/releases/download/v4.0.0

readonly archives='
file:zsh-5.8-cygwin_nt-10.0-i686.tar.gz;   md5:982f10d5009f4737cdf16cf5f2d029ec; sha256:8e3d51c2460f96c8570cc086189cdafb05a7acf72da04da4b562edc93715a77b;
file:zsh-5.8-cygwin_nt-10.0-x86_64.tar.gz; md5:a83d9fe7f1954569af09d934ff4223b3; sha256:dc7088d98393c37101b037879f0b71fcc2f3a5c72ff65f149b99bdfbdec257ca;
file:zsh-5.8-darwin-x86_64.tar.gz;         md5:cb70a7e36f94bd5205bba952b8abf2bf; sha256:b0cec1e2a80570cd304c5743d0cb5f311ad2d31613cd6e07fd219b78e6f6adb3;
file:zsh-5.8-freebsd-amd64.tar.gz;         md5:04d6b5bd0b3cb723c003eb4c7aea51d8; sha256:e377d8067ae9e15abeb9250ad323509aac78d57f13b06efcc5ecf8a8c242d5c0;
file:zsh-5.8-linux-aarch64.tar.gz;         md5:a10c08d39160e57172d3187ac65be37d; sha256:4481eedd6b6637238dd3a7ce68ce0f150cc2c2ed8a6d7cdd2b881ad7173de943;
file:zsh-5.8-linux-armv6l.tar.gz;          md5:ab4577ed10c70a3bafc4143ec342c1bf; sha256:a60dbef025df5f382ceeeae15d5a2cd47b9776c231dab0b37602eaa444926251;
file:zsh-5.8-linux-armv7l.tar.gz;          md5:fcae87d476fa8b67258a35dfd1efa9dd; sha256:43cce310f4b7a0c1c3560ddc9cf93e949bb9d4959d1bf923274c6385a7e18e0f;
file:zsh-5.8-linux-i386.tar.gz;            md5:1ed32088cb792fd291d1d31c01d55f7c; sha256:fe36e8db068b5df7bef14e4a790c501c185e4db1abf8dc9410ee8a16a9d85bae;
file:zsh-5.8-linux-i586.tar.gz;            md5:ad54dba9ec8130dd060c899251e38832; sha256:7dd0930bfa0f1f526eb4e9a8dae54599bc2972f345ad11e627207bff0b48d084;
file:zsh-5.8-linux-i686.tar.gz;            md5:0c384d00fc12dce7d0cc20f4ae967342; sha256:f19680ac12271391fb7e2e7744cb418315deeffd65b7571f0e862cee0cc4143d;
file:zsh-5.8-linux-x86_64.tar.gz;          md5:43c83be3b171782d2ba2505db521f1b7; sha256:925ffdcbdca84ae350c3140e39469c6000459d0aa75cd4df17e6ad4dd9324e94;
file:zsh-5.8-msys_nt-10.0-i686.tar.gz;     md5:0f950e381e382409c5e8ba30b52e8d14; sha256:1d10723ee5cc2678bd56c671959c3d1ca99bf97375a9cb95643700df68dce387;
file:zsh-5.8-msys_nt-10.0-x86_64.tar.gz;   md5:dfd96a7ec06f0b3c8c23cf459d07f529; sha256:8b66d85c6db2f127279f296a3a6c0ef707b34718e031aa26aed3ed6dfa05ccd2;'

readonly lf="
"

if [ -t 1 ]; then
  readonly _0="$(printf '\033[0m')"
  readonly _B="$(printf '\033[1m')"
  readonly _U="$(printf '\033[4m')"
  readonly _R="$(printf '\033[31m')"
  readonly _G="$(printf '\033[32m')"
  readonly _Y="$(printf '\033[33m')"
else
  readonly _0=
  readonly _B=
  readonly _U=
  readonly _R=
  readonly _G=
  readonly _Y=
fi

usage="$(cat <<END
Usage: install [OPTIONS] [-t FILE] [-a <sha256|md5>]...
               [OPTIONS] -f FILE
               [OPTIONS] -u URL

If '-f FILE' is specified, install Zsh from the specified *.tar.gz
file produced by the build script.

If '-u URL' is specified, download the file and install as if with
'-f FILE'.

If neither '-f' nor '-u' is specified, download the appopriate file
from https://github.com/romkatv/zsh-bin/releases and install as if
with '-t FILE'. If '-a <sha256|md5>' is specified at least once,
abort installation if integrity of the downloaded package cannot
be verified with at least one of the listed hashing algorithms.

Options:

  -q

    Produce no output on success.

  -d DIR

    Install to this directory. If specified more than once, present
    an interactive dialog to choose the directory. Empty argument
    means a custom directory (requires manual user input). If '-d'
    is not specified, the effect is idential to this:

      -d /usr/local -d ~/.local -d ""
END
)"

absfile() {
  if [ ! -e "$1" ]; then
    >&2 echo "${_R}error${_0}: file not found: ${_U}$1${_0}"
    return 1
  fi
  local dir base
  dir="$(dirname -- "$1")"
  base="$(basename -- "$1")"
  ( cd -- "$dir" && dir="$(pwd)" && printf '%s/%s\n' "${dir%/}" "${base}" )
}

check_dir() {
  if [ -z "$1" ]; then
    >&2 echo "${_R}error${_0}: directory cannot be empty string"
    exit 1
  fi
  if [ -z "${1##~*}" ]; then
    >&2 echo "${_R}error${_0}: please expand ${_U}~${_0} in directory name: ${_U}$1${_0}"
    exit 1
  fi
  if [ -z "${1##//*}" ]; then
    >&2 echo "${_R}error${_0}: directory cannot start with ${_U}//${_0}: ${_U}$1${_0}"
    exit 1
  fi
}

add_dir() {
  num_dirs=$((num_dirs + 1))
  dirs="$dirs${num_dirs}${1}${lf}"
  if [ -n "$1" ]; then
    dirs_c="$dirs_c  ${_B}($num_dirs)${_0} ${_U}${1}${_0}${lf}"
  else
    dirs_c="$dirs_c  ${_B}($num_dirs)${_0} custom directory (input required)${lf}"
  fi
}

check_sudo() {
  local dir="$1"
  sudo=
  while true; do
    if [ -e "$dir" ]; then
      if [ ! -d "$dir" ]; then
        >&2 echo "${_R}error${_0}: not a directory: ${_U}$dir${_0}"
        return 1
      fi
      if [ ! -w "$dir" ]; then
        if [ "$euid" = 0 ]; then
          >&2 echo "${_R}error${_0}: directory not writable: ${_U}$dir${_0}"
          return 1
        else
          if [ -z "$quiet" ]; then
            echo "${_Y}===>${_0} using ${_U}${_G}sudo${_0} for installation"
          fi
          sudo=sudo
        fi
      fi
      break
    fi
    if [ "$dir" = / -o "$dir" = . ]; then
      break
    fi
    dir="$(dirname -- "$dir")"
  done
}

dirs=
dirs_c=
num_dirs=0
quiet=
algos=
url=
file=
sudo=

command -v sudo >/dev/null 2>&1 && euid="$(id -u 2>/dev/null)" || euid=0

while getopts ':hqd:a:f:u:' opt "$@"; do
  case "$opt" in
    h)
      printf '%s\n' "$usage"
      exit
    ;;
    q)
      if [ -n "$quiet" ]; then
        >&2 echo "${_R}error${_0} duplicate option: ${_B}-${opt}${_0}"
        exit 1
      fi
      quiet=1
    ;;
    d)
      if printf "%s" "$dirs" | cut -b 2- | grep -qxF -- "$OPTARG"; then
        >&2 echo "${_R}error${_0}: duplicate option: ${_B}-${opt} ${OPTARG}${_0}"
        exit 1
      fi
      if [ "$(printf "%s" "$OPTARG" | wc -l)" != 0 ]; then
        >&2 echo "${_R}error${_0}: incorrect value of ${_B}-${opt}${_0}: ${_B}${OPTARG}${_0}"
        exit 1
      fi
      if [ "$num_dirs" = 9 ]; then
        >&2 echo "${_R}error${_0}: too many options: ${_B}-${opt}${_0}"
        exit 1
      fi
      if [ -n "$OPTARG" ]; then
        check_dir "$OPTARG"
      fi
      add_dir "$OPTARG"
    ;;
    a)
      case "$OPTARG" in
        sha256|md5)
          if [ -n "$algos" -a -z "${algos##*<$OPTARG>*}" ]; then
            >&2 echo "${_R}error${_0}: duplicate option: ${_B}-${opt} ${OPTARG}${_0}"
            exit 1
          fi
          algos="$algos<$OPTARG>"
        ;;
        *)
          >&2 echo "${_R}error${_0}: incorrect value of ${_B}-${opt}${_0}: ${_B}${OPTARG}${_0}"
          exit 1
        ;;
      esac
    ;;
    f)
      if [ -n "$file" ]; then
        >&2 echo "${_R}error${_0}: duplicate option: ${_B}-${opt}${_0}"
        exit 1
      fi
      if [ -z "$OPTARG" ]; then
        >&2 echo "${_R}error${_0}: incorrect value of ${_B}-${opt}${_0}: ${_B}${OPTARG}${_0}"
        exit 1
      fi
      file="$(absfile "$OPTARG")"
    ;;
    u)
      if [ -n "$url" ]; then
        >&2 echo "${_R}error${_0}: duplicate option: ${_B}-${opt}${_0}"
        exit 1
      fi
      if [ -z "$OPTARG" ]; then
        >&2 echo "${_R}error${_0}: incorrect value of ${_B}-${opt}${_0}: ${_B}${OPTARG}${_0}"
        exit 1
      fi
      url="$OPTARG"
    ;;
    \?) >&2 echo "${_R}error${_0}: invalid option: ${_B}-${OPTARG}${_0}"           ; exit 1;;
    :)  >&2 echo "${_R}error${_0}: missing required argument: ${_B}-${OPTARG}${_0}"; exit 1;;
    *)  >&2 echo "${_R}internal error${_0}: unhandled option: ${_B}-${opt}${_0}"   ; exit 1;;
  esac
done

if [ "$OPTIND" -le $# ]; then
  >&2 echo "${_R}error${_0}: unexpected positional argument"
  return 1
fi

if [ -n "$algos" ]; then
  if [ -n "$file" ]; then
    >&2 echo "${_R}error${_0}: incompatible options: ${_B}-f${_0} and ${_B}-a${_0}"
    exit 1
  fi
  if [ -n "$url" ]; then
    >&2 echo "${_R}error${_0}: incompatible options: ${_B}-u${_0} and ${_B}-a${_0}"
    exit 1
  fi
fi

if [ "$num_dirs" = 0 ]; then
  add_dir /usr/local
  add_dir ~/.local
  add_dir ""

  dirs_c="  ${_B}(1)${_0} ${_U}/usr/local${_0}        ${_Y}|${_0}"
  if check_sudo /usr/local >/dev/null 2>/dev/null; then
    if [ -n "$sudo" ]; then
      dirs_c="${dirs_c} uses ${_U}${_G}sudo${_0}"
    else
      dirs_c="${dirs_c} does not need ${_U}${_G}sudo${_0}"
    fi
    if [ -d /usr/local ]; then
      dirs_c="${dirs_c} (${_B}recommended${_0})"
    fi
  else
    dirs_c="${dirs_c} ${_R}not writable${_0}"
  fi

  dirs_c="${dirs_c}${lf}  ${_B}(2)${_0} ${_U}~/.local${_0}          ${_Y}|${_0}"
  if check_sudo ~/.local >/dev/null 2>/dev/null; then
    if [ -n "$sudo" ]; then
      dirs_c="${dirs_c} uses ${_U}${_G}sudo${_0}"
    else
      dirs_c="${dirs_c} does not need ${_U}${_G}sudo${_0}"
    fi
  else
    dirs_c="${dirs_c} ${_R}not writable${_0}"
  fi

  dirs_c="${dirs_c}${lf}  ${_B}(3)${_0} custom directory  ${_Y}|${_0} manual input required${lf}"
fi

if [ "$num_dirs" = 1 ]; then
  choice=1
else
  while true; do
    echo "Choose installation directory for ${_G}Zsh 5.8${_0}:"
    echo ""
    printf "%s" "$dirs_c"
    echo ""
    printf "Choice: "
    read -r choice
    if printf "%s" "$dirs" | cut -b 1 | grep -qxF -- "$choice"; then
      break
    fi
    >&2 echo "Invalid choice: ${_R}$choice${_0}. Try again."
    echo
  done
fi

dir="$(printf "%s" "$dirs" | sed "${choice}!d" | cut -b 2-)"
if [ -z "$dir" ]; then
  printf "Custom directory: "
  read -r dir
  check_dir "$dir"
  if [ -z "$quiet" ]; then
    echo
  fi
elif [ -z "$quiet" -a "$num_dirs" != 1 ]; then
  echo
fi

if [ -z "$quiet" ]; then
  printf "%s\n" "${_Y}===>${_0} installing ${_G}Zsh 5.8${_0} to ${_U}$dir${_0}"
fi

check_sudo "$dir"

$sudo mkdir -p -- "$dir"
cd -- "$dir"
dir="$(pwd)"

if [ -z "$file" -a -z "$url" ]; then
  kernel="$(uname -s | tr '[A-Z]' '[a-z]')"
  arch="$(uname -m | tr '[A-Z]' '[a-z]')"

  case "$kernel" in
    msys_nt-6.*)     kernel=msys_nt-10.0;;
    msys_nt-10.*)    kernel=msys_nt-10.0;;
    mingw32_nt-6.*)  kernel=msys_nt-10.0;;
    mingw32_nt-10.*) kernel=msys_nt-10.0;;
    mingw64_nt-6.*)  kernel=msys_nt-10.0;;
    mingw64_nt-10.*) kernel=msys_nt-10.0;;
    cygwin_nt-6.*)   kernel=cygwin_nt-10.0;;
    cygwin_nt-10.*)  kernel=cygwin_nt-10.0;;
  esac

  url="$url_base/zsh-5.8-${kernel}-${arch}.tar.gz"

  if [ -n "${archives##*file:${url##*/};*}" ]; then
    >&2 echo "${_R}error${_0}: there is no prebuilt binary for your architecture"
    >&2 echo
    >&2 echo "See ${_U}https://github.com/romkatv/zsh-bin#compiling${_0} for building one."
    exit 1
  fi

  check_sig=1
else
  check_sig=0
fi

if [ -n "$url" ]; then
  file="${TMPDIR:-/tmp}"/zsh-bin.tmp.$$.tar.gz
  cleanup() { rm -f -- "$file"; }
  trap cleanup INT QUIT TERM EXIT ILL PIPE

  if [ -z "$quiet" ]; then
    echo "${_Y}===>${_0} fetching ${_U}${url##*/}${_0}"
  fi

  set +e

  if command -v curl >/dev/null 2>&1; then
    err="$(command curl -fsSLo "$file" -- "$url" 2>&1)"
  elif command -v wget >/dev/null 2>&1; then
    err="$(command wget -O "$file" -- "$url" 2>&1)"
  else
    >&2 echo "${_R}error${_0}: please install ${_G}curl${_0} or ${_G}wget${_0} and retry"
    exit 1
  fi

  if [ $? != 0 ]; then
    >&2 printf "%s\n" "$err"
    >&2 echo "${_R}error${_0}: failed to download ${_U}$url${_0}"
    exit 1
  fi

  set -e
else
  cleanup() { true; }
fi

if [ "$check_sig" = 1 ]; then
  if [ -z "$quiet" ]; then
    echo "${_Y}===>${_0} verifying archive integrity"
  fi

  for algo in sha256 md5; do
    hash=none
    case "$algo" in
      sha256)
        if command -v shasum >/dev/null 2>/dev/null; then
          hash="$(shasum -b -a 256 -- "$file")"
          hash="${hash%% *}"
        elif command -v sha256sum >/dev/null 2>/dev/null; then
          hash="$(sha256sum -b -- "$file")"
          hash="${hash%% *}"
        elif command -v sha256 >/dev/null 2>/dev/null; then
          # Ignore sha256 output if it's from hashalot. It's incompatible.
          hash="$(sha256 -- "$file" </dev/null)"
          if [ ${#hash} -lt 64 ]; then
            hash=none
          else
            hash="${hash##* }"
          fi
        fi
      ;;
      md5)
        if command -v md5sum >/dev/null 2>/dev/null; then
          hash="$(md5sum -b -- "$file")"
          hash="${hash%% *}"
        elif command -v md5 >/dev/null 2>/dev/null; then
          hash="$(md5 -- "$file")"
          hash="${hash##* }"
        fi
      ;;
      *)
        >&2 echo "${_R}internal error${_0}: unhandled algorithm: ${_B}$algo${_0}"
        exit 1
      ;;
    esac
    if [ "$hash" != none ]; then
      if [ -n "${archives##* $algo:$hash;*}" ]; then
        >&2 echo "${_R}error${_0}: ${_B}$algo${_0} signature mismatch"
        >&2 echo ""
        >&2 echo "Expected:"
        >&2 echo ""
        >&2 echo "  ${_G}$(printf "%s" "$archives" | grep -F -- "${url##*/}" | sed 's/  */ /g')${_0}"
        >&2 echo ""
        >&2 echo "Found:"
        >&2 echo ""
        >&2 echo "  ${_R}$algo:$hash${_0}"
        exit 1
      fi
      if [ -z "$quiet" ]; then
        echo "${_Y}===>${_0} ${_B}$algo${_0} signature matches"
      fi
      algos="${algos##*<$algo>*}"
    else
      if [ -z "$quiet" ]; then
        echo "${_Y}===>${_0} no tools to verify ${_B}$algo${_0} signature"
      fi
    fi
  done
fi

if [ -n "$algos" ]; then
  >&2 echo "${_R}error${_0}: no tools available to verify archive integrity"
  exit 1
fi

if [ -z "$quiet" ]; then
  echo "${_Y}===>${_0} extracting files"
fi

$sudo tar -xzf "$file"
$sudo ./share/zsh/5.8/scripts/relocate

cleanup

if [ -z "$quiet" ]; then
  echo ""
  echo "Installed ${_G}Zsh 5.8${_0} to ${_U}$dir${_0}"
  echo ""
  echo "To start Zsh, type:"
  echo ""
  if ! zsh="$(command -v zsh 2>/dev/null)" || [ "$zsh" != "$dir/bin/zsh" ]; then
    echo "  ${_Y}export${_0} PATH=${_Y}\"$dir/bin:\$PATH\"${_0}"
  fi
  echo "  ${_G}zsh${_0}"
  echo
fi

}
